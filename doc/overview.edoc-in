@copyright 2004-2005 Motivity Telecom Inc.
@version %VERSION%
@title TCAP User's Guide
@doc This application implements a protocol stack for SS7 TCAP.

==Introduction==

The {@link //tcap. tcap} application is a protocol stack implementation
of the Transaction Capabilities Application Part (TCAP) of the Signaling
System No. 7 (SS7) specifications <cite>ITU-T Q.771-Q.774</cite> and
<cite>ANSI T1.114-2000</cite>.  Transaction Capabilities (TC) users
include the Intelligent Network Application Protocol (INAP)
<cite>ITU-T Q.1208</cite> and the Mobile Application Part (MAP)
<cite>3GPP 29.002</cite>.

==Requirements==
This application includes only the TCAP procedures and must be used
with a separate application providing the SCCP service.

==Transaction Capabilities==
Transaction Capabilities (TC) provides support for interactive
applications in a distributed environment through a generic remote procedure
call service.  TC provides the framework for invoking remote procedures
and returning the results of these procedures.

<a href="transaction_capabilities.png">Figure 1-1</a> shows the
structure of TC using SS7 network services.  TC is composed of two
sublayers; the Component Sublayer (CSL)  and the Transaction Sublayer
(TSL).  The CSL deals with components which are the Application Protocol
Data Units (APDU) that convey remote operations and their responses.
The CSL optionally may utilize the dialogue portion protocol for conveying
information related to application context or user information.  The TSL
deals with the exchange of messages containing components and optionally,
a dialogue portion, between TC-Users.

<p><img alt="diagram of transaction capabilities"
		name="figure1-1" src="transaction_capabilities.png" /><br />
Figure 1-1: TC in SS7</p>

==Open Systems Interconnection (OSI)==
TC is based on the Remote Operations concept defined in Recommendation
<cite>X.880</cite> (ROS).  TC allows communication between TC-Users across
an SS7 network.  This communication can be modelled with the OSI seven layer
stack as shown in <a href="osi_model.png">Figure-2.1</a>.  SS7 does not
define an Intermediate Services Part (ISP) so the Presentation, Session
and Transport layers are formally missing however some aspects of the these
are present in TC.  CSL lies entirely within the application layer.

<p><img alt="diagram of osi layers"
		name="figure2-1" src="osi_model.png" /><br />
Figure 2-1: TC in OSI</p>

<a href="application_process.png">Figure-2.2</a> shows the structure of the
OSI Application Layer.  An Application Process (AP) consists of application
code within and outside the OSI framework.  The part of an application which
resides in the OSI framework is called an Application Entity (AE).  The AE
may contain a number of cooperating components, each with it's own protocol
elements.  These components are called Application Service Elements (ASE).
An ASE is a separately defined (standardized) part of an Application Entity.
ASEs provide a service to higher level ASEs not a higher level layer.  The
distinction being that unlike layer services an ASE service may consider
only part of the communication between Application Entities.

<p><img alt="diagram of application process"
		name="figure2-2" src="application_process.png" /><br />
Figure 2-2: OSI Application Process</p>

The Component sublayer is in partial alignment with the capabilities of the
Remote Operation Service Element (ROSE) <cite>X.219</cite> and <cite>X.229</cite>.
The <cite>X.229</cite> protocol is contained within the TC component protocol.
CSL includes some extensions to ROSE.  The dialogue control facilities are in
partial alignment with the capabilities of the Association Control Service
Element (ACSE) <cite>X.217</cite> and <cite>X.227</cite>. The abstract
syntax for the dialogue control APDUs are a subset of the OSI ACSE abstract
syntax.

<a href="tcap_application_process.png">Figure-2.3</a> shows an Application
Process with an Application Entity which includes the Transaction Capabilities
ASE and the Mobile Application Part ASE.

<p><img alt="diagram of SS7 application process"
		name="figure2-3" src="tcap_application_process.png" /><br />
Figure 2-3: SS7 Application Process</p>

An Application Entity (AE) is the part of your Application Process (AP)
which uses the services of a combined set of ASEs.  An AE-Type defines a
set of functions used for communications.  For example one AE-Type may
combine a TC ASE with a MAP ASE while another combines a TC ASE with an
INAP ASE.  An AE Invocation (AEI) is an instance of an AE and it's ASEs.

An AEI may perform a subset of the communication functions defined by
the AE-Type.  The actual procedures that may need to be performed for
an instance of communication are determined by the Application Context
(AC).  The Application Context states which functions are needed.  Based
on this information the AEI is instantiated from the AE-Type which fits
these criteria.

Using the {@link //tcap. tcap} application you will implement your
Application Process (AP) and Application Entity (AE) in Erlang.  The
set of processes which make up an instance of the Component Sublayer
(CSL) form the TC ASE.  For each new dialogue an AEI including a TC ASE
and a TC-User ASE (e.g. MAP) is created.  The AE uses the ASEs together
to provide higher level functions to the AP.

<p><img alt="diagram of AE invocations"
		name="figure3-1" src="ae_invocations.png" /><br />
Figure 3-1: AE Invocations</p>

For example you may have an AE which uses TCAP and MAP ASEs implemented
in a {@link //stdlib/gen_fsm. gen_fsm} callback module named
<tt>ae_map_v3</tt>.  An AEI for a location update could be created as:

```
1> gen_fsm:start_link(ae_map_v3, ['networkLocUpContext-v3', TSL], [])
'''

Where <tt>'networkLocUpContext-v3'</tt> is the application context name
and <tt>TSL</tt> is a reference to the transaction sublayer used for
this operation.  The callback module would start TC and MAP and coordinate
them to provide the location update service to the Application Program.

```
-module(ae_map_v3).
-export([init/1, handle_event/2]).
-behaviour(gen_fsm).
-record(state, {ac, tsl, csl, map}).

init([AC, TSL]) ->
    case tcap:open(TSL, self(), []) of
        {ok, CSL} ->
            case map:open(CSL, self(), []) of
                {ok, MAP} ->
                    State = #state{ac = AC, tsl = TSL, csl = CSL, map = MAP},
                    {ok, idle, State};
                Error ->
                   Error
            end;
         Error ->
            Error
    end.
'''

In ASN.1 an <tt>OPERATION-PACKAGE</tt> type is used to define an ASE.  An
<tt>APPLICATION-CONTEXT</tt> type defines an AC.  An application protocol
is defined by the set of all possible ACs.  The above example uses these
definitions from the 3GPP/GSM MAP specification:

```
networkLocUpContext-v3 APPLICATION-CONTEXT ::= {
    -- Responder is HLR if Initiator is VLR
    INITIATOR CONSUMER OF {locationUpdatingPackage-v3 | dataRestorationPackage-v3}
    RESPONDER CONSUMER OF {subscriberDataMngtPackage-v3 | tracingPackage-v3}
    ID                    {map-ac networkLocUp(1) version3(3)}
}
'''
```
locationUpdatingPackage-v3 OPERATION-PACKAGE ::= {
    -- Supplier is HLR if Consumer is VLR
    CONSUMER INVOKES      {updateLocation}
    SUPPLIER INVOKES      {forwardCheckSs-Indication}
}
'''
```
updateLocation OPERATION ::= { --Timer m
    ARGUMENT              UpdateLocationArg
    RESULT                UpdateLocationRes
    ERRORS                {systemFailure | dataMissing | unexpectedDataValue | unknownSubscriber | roamingNotAllowed}
    CODE                  local:2
}
'''

In a complex AE there may be multiple TC-User ASEs.  The operation
codes (e.g. <tt>local:2</tt> for the <tt>updateLocation</tt> above)
of the received components allow the AE to distribute to the appropriate
ASE.  While the <tt>locationUpdatingPackage-v3</tt> definition above
appears informally in the current specifications MAP is still viewed as
having a single Application Service Element for historical reasons.
The Intelligent Network Application Protocol (INAP) however clearly
defines many distinct ASEs.  <a href="inap_aei.png">Figure 3-2</a>
shows the configuration of an AEI for INAP using the
<tt>scf-to-ssf-status-reporting-v1</tt> AC.

<p><img alt="diagram of INAP AEI"
		name="figure3-2" src="inap_aei.png" /><br />
Figure 3-2: Example INAP AEI</p>

==Addressing==
When used with SS7 network services the addressing of the Signaling
Connection Control Part (SCCP) is used.  The SCCP CalledParty and
CallingParty address formats are used in the TCAP address parameters;
Destination Address and Originating Address.  These parameters identify
the destination and originating TC-user.

The SCCP Subsystem Number (SSN) is used by SCCP for message distrubution
to separate instances of the TCAP Transaction Sublayer (TSL).

<p><img alt="diagram of ssn distribution"
		name="figure4-1" src="ssn_distribution.png" /><br />
Figure 4-1: SSN Distribution</p>

==Process Communication==
A number of processes interact to provide the TCAP service.
<a href="tcap_messaging.png">Figure 5-1</a> depicts the message paths
between processes used with the TCAP application.

The TCAP protocol layer is split into two sublayers; the Transaction
Sublayer (TSL) and the Component Sublayer (CSL).

In the transaction sublayer a transaction coordinator (TCO)
process performs marshalling of incoming indications from the
SCCP service access point (SAP).  It spawns a transaction state
machine (TSM) for each new transaction.

In the component sublayer a dialogue handler (DHA) process
is started for each transaction.  It then spawns a component
coordinator process (CCO).  For a remotely initiated transaction
DHA is started by TCO.  For a locally initiated transaction DHA
is started by the TC-User.  An invocation state machine (ISM)
is started for each locally invoked operation involved in the
transaction.

<p><img alt="diagram of process communication"
		name="figure5-1" src="tcap_messaging.png" /><br />
Figure 5-1: Process Communication</p>

==Supervision Hierarchy==
The processes which make up an instance of the TCAP service layer
are all instantiated within a supervision tree.  When the
application is started a top level supervisor is created with no
children.  The user may call {@link tcap:start_tsl/3. start_tsl/3}
to create a new transaction sublayer (TSL) for each SCCP service
access point (SAP). A {@link tcap_tsl_sup. tcap_tsl_sup} supervisor
is started with one worker TCO and a supervisor for dynamically
added TSM workers.

<a href="tcap_supervision.png">Figure 5-2</a> shows the structure
of the supervision hierarchy.

For every new transaction ID assigned (`Begin' indication or request)
TCO ({@link tcap_tco_server. tcap_tco_server}) starts a TSM
({@link tcap_tsm_fsm. tcap_tsm_fsm}) by dynamically addding it to
the {@link tcap_transaction_sup. tcap_transaction_sup} supervisor.
In the case of a `Unidirectional' primitive no transaction is
assigned and no TSM is started.

TCO also starts a {@link tcap_dialogue_sup. tcap_dialogue_sup}
supervisor, by dynamically adding it to the
{@link tcap_csl_sup. tcap_csl_sup} supervisor, when a `Begin' or
`Unidirectional' primitive is received.

When a {@link tcap_dialogue_sup. tcap_dialogue_sup} supervisor is
started it creates a DHA ({@link tcap_dha_fsm. tcap_dha_fsm})
worker and a ({@link tcap_components_sup. tcap_components_sup})
supervisor with one CCO ({@link tcap_cco_server. tcap_cco_server})
worker and a {@link tcap_invocation_sup. tcap_invocation_sup}
supervisor.

An ISM ({@link tcap_ism_fsm. tcap_ism_fsm} worker is dynamically
added to the {@link tcap_invocation_sup. tcap_invocation_sup}
supervisor for each locally invoked operation.

<p><img alt="diagram of supervision tree"
		name="figure5-2" src="tcap_supervision.png" /><br />
Figure 5-2: Process Supervision</p>


==Distribution==
In order to facilitate scalable systems the TC service layer
may be decomposed with the TSL and CSL sublayers distributed
across nodes.  <a href="tcap_distribution.png">Figure 6-1</a>
shows an example of an AP having AEIs distributed across several
remote Erlang nodes to accomplish load distribution. The AE
includes an ASE for CAMEL Application Part (CAP) and an ASE
for TCAP implemented with the CSL. 

<p><img alt="diagram of process distribution"
		name="figure6-1" src="tcap_distribution.png" /><br />
Figure 6-1: Process Distribution</p>

When the TSL is created with {@link tcap:start_tsl/3. start_tsl/3}
the {@link tcap_tco_server. tcap_tco_server} behaviour callback module
may (optionally) export a
{@link tcap_tco_server:start_dialogue/1. start_dialogue/1} callback
function used to start a CSL at a remote node by dynamically adding
a child of a {@link tcap_csl_sup. tcap_csl_sup} supervisor in the
{@link //tcap. tcap} application running on that node.

==Primitives (ITU)==
The communication between layers is defined in ITU-T recommendations
using "primitives". The information content is specified but not a
specific encoding.  ITU-T Q.771 provides the primitives for TCAP.
In the {@link //tcap. tcap} application tuples of the form provided
below are sent as messages between processes. The `Parameters' are 
represented using primitive specific records.
===TC-User &#8594; Component Sublayer===
====Dialogue Handling====
<tt>{'TC', 'UNI', request, Parameters}</tt><br />
<tt>{'TC', 'BEGIN', request, Parameters}</tt><br />
<tt>{'TC', 'CONTINUE', request, Parameters}</tt><br />
<tt>{'TC', 'END', request, Parameters}</tt><br />
<tt>{'TC', 'U-ABORT', request, Parameters}</tt><br />
====Component Handling====
<tt>{'TC', 'INVOKE', request, Parameters}</tt><br />
<tt>{'TC', 'RESULT-L', request, Parameters}</tt><br />
<tt>{'TC', 'RESULT-NL', request, Parameters}</tt><br />
<tt>{'TC', 'U-ERROR', request, Parameters}</tt><br />
<tt>{'TC', 'U-CANCEL', request, Parameters}</tt><br />
<tt>{'TC', 'U-REJECT', request, Parameters}</tt><br />

===Component Sublayer &#8594; TC-User===
====Dialogue Handling====
<tt>{'TC', 'UNI', indication, Parameters}</tt><br />
<tt>{'TC', 'BEGIN', indication, Parameters}</tt><br />
<tt>{'TC', 'END', indication, Parameters}</tt><br />
<tt>{'TC', 'U-ABORT', indication, Parameters}</tt><br />
<tt>{'TC', 'P-ABORT', indication, Parameters}</tt><br />
<tt>{'TC', 'NOTICE', indication, Parameters}</tt><br />
====Component Handling====
<tt>{'TC', 'INVOKE', indication, Parameters}</tt><br />
<tt>{'TC', 'RESULT-L', indication, Parameters}</tt><br />
<tt>{'TC', 'RESULT-NL', indication, Parameters}</tt><br />
<tt>{'TC', 'U-ERROR', indication, Parameters}</tt><br />
<tt>{'TC', 'L-CANCEL', indication, Parameters}</tt><br />
<tt>{'TC', 'L-REJECT', indication, Parameters}</tt><br />
<tt>{'TC', 'R-REJECT', indication, Parameters}</tt><br />
<tt>{'TC', 'U-REJECT', indication, Parameters}</tt><br />
<tt>{'TC', 'TIMER-RESET', indication, Parameters}</tt><br />

===Component Sublayer &#8594; Transaction Sublayer===
<tt>{'TR', 'UNI', request, Parameters}</tt><br />
<tt>{'TR', 'BEGIN', request, Parameters}</tt><br />
<tt>{'TR', 'CONTINUE', request, Parameters}</tt><br />
<tt>{'TR', 'END', request, Parameters}</tt><br />
<tt>{'TR', 'U-ABORT', request, Parameters}</tt><br />

===Transaction Sublayer &#8594; Component Sublayer===
<tt>{'TR', 'UNI', indication, Parameters}</tt><br />
<tt>{'TR', 'BEGIN', indication, Parameters}</tt><br />
<tt>{'TR', 'CONTINUE', indication, Parameters}</tt><br />
<tt>{'TR', 'END', indication, Parameters}</tt><br />
<tt>{'TR', 'U-ABORT', indication, Parameters}</tt><br />
<tt>{'TR', 'P-ABORT', indication, Parameters}</tt><br />
<tt>{'TR', 'NOTICE', indication, Parameters}</tt><br />

===Transaction Sublayer &#8594; SCCP===
<tt>{'N', 'UNITDATA', request, Parameters}</tt><br />

===SCCP &#8594; Transaction Sublayer===
<tt>{'N', 'UNITDATA', indication, Parameters}</tt><br />
<tt>{'N', 'NOTICE', indication, Parameters}</tt><br />

